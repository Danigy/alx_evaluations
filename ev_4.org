#+TITLE: Evaluation #4

**** 0. Given this code:

#+begin_src c
  struct point {
     int x;
     int y;
  };
  struct point my_point = { 3, 7 };
  struct point *p = &my_point;
#+end_src

To set the member y of my variable my_point to 98, I can do (select all
valid answers):

- [X] =my_point.y = 98=
- [ ] =my_point->y = 98=
- [ ] =p.y = 98=
- [X] =(*p).y = 98=
- [X] =p->y = 98=

**** 1. What do these lines print?

#+begin_src python
  class Base():
      """ My base class """

      __nb_instances = 0

      def __init__(self):
          Base.__nb_instances += 1
          self.id = Base.__nb_instances

  class User(Base):
      """ My User class """

      def __init__(self):
          super().__init__()
          self.id += 99

  u = User()
  print(u.id)
#+end_src

- [ ] 99
- [X] 100
- [ ] 1

**** 2. In a singly linked list, what are possible directions to traverse it?

(select all possible answers)

- [X] Forward
- [ ] Backward

**** 3. What is the size of the =int= data type on a 64-bit machine?

- [ ] 1 byte
- [ ] 2 bytes
- [X] 4 bytes
- [ ] 8 bytes

**** 4. Based on this code, what should all the test cases be?

(select all possible answers)

#+begin_src python
   def uniq(list):
      """ Returns unique values of a list """
      u_list = []
      for item in list:
          if item not in u_list:
              u_list.append(item)
      return u_list
#+end_src

- [X] empty list
- [ ] list with one element (any type)
- [ ] list with 2 different elements (same type)
- [X] list with the same element twice (same type)
- [X] list with more than 2 times the same element (same type)
- [X] list with multiple types (integer, string, etc...)
- [X] not a list argument (ex: passing a dictionary to the method)

**** 5. What is the =unistd= symbolic constant for the standard error?

- [ ] STDIN_FILENO
- [ ] STDOUT_FILENO
- [X] STDERR_FILENO

**** 6. What do these lines print?

#+begin_src python
  class Base():
      """ My base class """

      __nb_instances = 0

      def __init__(self):
          Base.__nb_instances += 1
          self.id = Base.__nb_instances

  class User(Base):
      """ My User class """

      def __init__(self):
          super().__init__()
          self.id = 89

  u = User()
  print(u.id)
#+end_src

- [X] 89
- [ ] 90
- [ ] 1

**** 7. Is this module correctly documented?

#+begin_src python
  #!/usr/bin/python3
  """ 
      My calculation module
  """
  import sys
  ...
#+end_src

- [ ] Yes
- [ ] No

**** 8. What is =__repr__=?

- [ ] Instance method that prints an "official" string representation of an
  instance
- [X] Instance method that returns an "official" string representation of an
  instance
- [ ] Instance method that returns the dictionary representation of an
  instance

**** 9. What do these lines print?

#+begin_src python
  class User:
      id = 1

  u = User()
  User.id = 98
  print(u.id)
#+end_src

- [ ] None
- [ ] 1
- [ ] 89
- [X] 98

**** 10. Is this a standardized way to comment a function in Python?

#+begin_src python
  /* Addition function */
  def add(a, b):
      return a + b
#+end_src

- [X] No
- [ ] Yes

**** 11. Bubble Sort is a _______________.

- [X] simple comparison sorting algorithm
- [ ] complex comparison sorting algorithm
- [ ] simple non-comparison searching algorithm
- [ ] simple non-comparison sorting algorithm

**** 12. Which of the following sorting algorithms has best case time complexity of =O(nlog(n))=?

- [X] Quick Sort
- [ ] Bubble Sort
- [ ] Insertion Sort
- [ ] Selection Sort

**** 13. In this following code, what is=__password=?

#+begin_src python
  class User:
      id = 89
      name = "no name"
      __password = None

      def __init__(self, new_name=None):
          self.is_new = True
          if new_name is not None:
              self.name = new_name
#+end_src

- [ ] A public class attribute
- [ ] A public instance attribute
- [ ] A protected class attribute
- [ ] A protected instance attribute
- [X] A private class attribute
- [ ] A private instance attribute

**** 14. What data structure is the foundation of a Python dictionary or set?

- [X] Hash Table
- [ ] Stack
- [ ] Queue
- [ ] Binary Tree

**** 15. What does the following Bash script do?

#+begin_src bash
  #!/usr/bin/env bash                                                             

  var="Tech"
  if [ -e "$var" ]
  then
      if [ -f "$var" ]
      then
          echo "Betty"
      elif [ -d "$var" ]
      then
          echo "School"
      fi
  else
      echo "$var doesn't exist"
  fi
#+end_src

- [X] Checks if =Tech= exists, otherwise prints "Tech doesn't exist". If it
  exists and it's a file, print "Betty", otherwise if it's a directory,
  print "School".
- [ ] Checks if a file (inputted by the user) exists, otherwise prints "File
  doesn't exist". If it exists and it's a file, print "Betty", otherwise
  if it's a directory, print "School".
- [ ] Checks if =Tech= exists and prints "Tech exists"

**** 16. What do these lines print?

#+begin_src python
  >>> class User:
  >>>     id = 89
  >>>     name = "no name"
  >>>     __password = None
  >>>     
  >>>     def __init__(self, new_name=None):
  >>>         self.is_new = True
  >>>         if new_name is not None:
  >>>             self.name = new_name
  >>> 
  >>> u = User()
  >>> u.name
#+end_src

- [ ] name
- [ ] None
- [ ] 'John'
- [X] 'no name'

**** 17. What is =__doc__=?

- [X] The string documentation of an object (based on docstring)
- [ ] Prints the documentation of an object
- [ ] Creates man file